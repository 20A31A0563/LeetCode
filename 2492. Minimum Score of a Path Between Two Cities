
/* Thr logic is to find all the reachablenodes from either the source or the destination and
find the minimum of distance of each given path if the node of the path is in visited array*/
class Solution {
public:
   void dfs(int node,vector<vector<int>> &adj,vector<int> &vis)
   {
       vis[node]=1;
       
       for(auto it:adj[node])
       {
           if(vis[it]==-1)
                  {
                      dfs(it,adj,vis);
                  }
       }
   }
    
    int minScore(int n, vector<vector<int>>& roads)
    {
        vector<vector<int>> adj;
        adj.resize(n+1);
        for(int i=0;i<size(roads);i++)
        {
            adj[roads[i][0]].push_back(roads[i][1]);
            adj[roads[i][1]].push_back(roads[i][0]);
        }
        vector<int> vis(n+1,-1);
        dfs(1,adj,vis);
        
        
        int ans = INT_MAX;
        for(int i=0;i<size(roads);i++)
        {
            if(vis[roads[i][0]]==1 || vis[roads[i][1]]==1)
            {
                ans = min(ans,roads[i][2]);
                
            }

        }
        return ans;


        
    }
};
